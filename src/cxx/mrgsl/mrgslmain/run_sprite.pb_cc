/******************************************************************************
**                   Copyright (C) 2014 by CEA
*******************************************************************************
**
**    UNIT
**
**    Version: 1.0
**
**    Author: Fred Ngole
**
**    Date:  24/09/2014
**    
**    File:  run_sprite.cc
**
*******************************************************************************
**
**    DESCRIPTION   
**    ----------- 
**    SPRITE algorithm main file             
**
**
******************************************************************************/

#include "sr_util.h"
#include "sprite.h"
#include "IM_Obj.h"
#include "IM_IO.h"
#include <iomanip>
#include "MR_Obj.h"

extern int  OptInd;
extern char *OptArg;

#define OUTMAN stdout

char Name_Cube_In[1024]; /* input file image */
char Name_Imag_Out[1024]; /* output file name */
char Name_Resi_Out[1024]; /* Residual file name */
char outputs_Dir[1024]; /* Outputs directory file name */

int Nbr_Plan=-1;  /* number of scales */
int Nbr_Plan_Mod = -1;//DEFAULT_NBR_SCALE;  /* number of scales for model denoising */
float N_Sigma=DEFAULT_N_SIGMA;   /* number of sigma (for the noise) */
Bool WriteResi;
Bool WriteParam;
bool Verbose=False;
float ResolUp = 2.;
int DEFAULT_SPRITE_FILTER=50;
int Max_Iter = DEFAULT_SPRITE_FILTER; /* Maximum number of iteration */
int Max_Iter_Noise_Sim = 200;
int Noise_est_meth = 0; /* Noise estimation method for thresholding */
int Mod_denoise_meth = MR_SUPP_DENOISING; /* Model denoising method */
type_transform transform = TO_UNDECIMATED_MALLAT; /* Dictionary for inverse problem constraint */
type_transform transform_mod = TO_UNDECIMATED_MALLAT; /* Dictionary for first guess denoising */
Bool Thresh_type=True;
int nb_rw=1;
Bool eq_noise = True;
Bool eq_flux = True;
int cv_win = Max_Iter/2;
float cv_tol = 0.005;
char* shift_filename = NULL;
Bool Sparse_en = True;
char * dist_weights_filename=NULL;
int sparse_cons_type = ACCURATE_ANALYSIS;
int model_type=MODEL_SINC_INTERP;
int min_id=GEN_FWBW;
Bool pos_cons=True;
/****************************************************************************/

static void usage(char *argv[])
{
  fprintf(OUTMAN, "Usage: %s options in_Cube out_Image outputs_Dir\n\n", argv[0]);
  fprintf(OUTMAN, "   where options =  \n");
  fprintf(OUTMAN, "        [-d]\n");
  fprintf(OUTMAN, "             If set, the sparsity constraint is disabled.\n");
  manline();
  all_transform_usage(transform);
  manline();
  min_id_usage();
  manline();
  sparse_const_type_usage();
  manline();
  fprintf(OUTMAN, "         [-p]\n");
  fprintf(OUTMAN, "             If set, the positivity constraint is disable.\n");
  manline();
  fprintf(OUTMAN, "         [-T type_of_multiresolution_transform for model denoising.]\n");
  fprintf(OUTMAN, "             Same optional transforms as -t optional.\n");
  fprintf(OUTMAN, "             default is %s\n",  StringTransform((type_transform)transform_mod));
  manline();
  thresh_type_usage();
  //nbr_scale_usage(Nbr_Plan);
  fprintf(OUTMAN, "         [-n number_of_scales]\n");
  fprintf(OUTMAN, "             Number of scales used in the multiresolution transform.\n");
  fprintf(OUTMAN, "             Default is floor(log(Nx)/log(2))-1 for a rectangular image of smaller dimension Nx.\n");
  //nsigma_usage(N_Sigma);
  manline();
  max_iter_usage(Max_Iter);
  manline();
  fprintf(OUTMAN, "         [-r ResolUp]\n");
  fprintf(OUTMAN, "             Default is %f.\n", ResolUp);
  manline();
  fprintf(OUTMAN, "         [-R nb_rw]\n");
  fprintf(OUTMAN, "             Number of reweighted passes.\n");
  fprintf(OUTMAN, "             Default is %d.\n", nb_rw);
  manline();
  fprintf(OUTMAN, "         [-w ResiduFileName]\n");
  fprintf(OUTMAN, "             By default, the residu is not written.\n");
  manline();
  fprintf(OUTMAN, "         [-S ShiftFileName]\n");
  fprintf(OUTMAN, "             If not provided, the shifts are estimated.\n");
  manline();
  fprintf(OUTMAN, "         [-V dist_weights_filename]\n");
  fprintf(OUTMAN, "             File containing distance related weigths to account for space variability of PSF.\n");
  manline();
  noise_est_usage();
  manline();
  fprintf(OUTMAN, "         [-I number_of_realisations]\n");
  fprintf(OUTMAN, "             Number of realisations in the case noise simulation is chosen.\n");
  fprintf(OUTMAN, "             Default is %d.\n", Max_Iter_Noise_Sim);
  manline();
  mod_comp_usage();
  manline();
  mod_denoise_usage();
  manline();
  fprintf(OUTMAN, "         [-C cv_win]\n");
  fprintf(OUTMAN, "             Number of iterates for convergence assessment.\n");
  fprintf(OUTMAN, "             Default is %d.\n", cv_win);
  manline();
  fprintf(OUTMAN, "         [-a cv_tol]\n");
  fprintf(OUTMAN, "             Tolerance parameter for convergence assessment.\n");
  fprintf(OUTMAN, "             Default is %f.\n", cv_tol);
  manline();
  fprintf(OUTMAN, "         [-W]\n");
  fprintf(OUTMAN, "             If set, different diagnostic parameters are saved on the disk (centroids, flux estimates...).\n");
  manline();
  fprintf(OUTMAN, "         [-F]\n");
  fprintf(OUTMAN, "             If set, the photometric flux are estimated, otherwise they are assumed to be equal.\n");
  manline();
  fprintf(OUTMAN, "         [-N]\n");
  fprintf(OUTMAN, "             If not set, the noise level is assumed to be the same in the low resolution images.\n");
  manline();
  vm_usage();
  manline();
  verbose_usage();
    
  manline();
  manline();
  exit(-1);
} 

/*********************************************************************/

/*********************************************************************/

/* GET COMMAND LINE ARGUMENTS */
static void filtinit(int argc, char *argv[])
{
  
  int c;
  Bool TransfOpt=False;
  Bool FilterOpt=False;
  Bool NscaleOpt=False;
  Bool EpsOptPoisson=False;
  Bool Optf=False;
#ifdef LARGE_BUFF
  int VMSSize=-1;
  Bool OptZ = False;
  char VMSName[4056] = "";
#endif     
    
  /* get options */
  while ((c = GetOpt(argc,argv, (char *) "t:T:c:n:s:i:r:R:w:e:I:m:M:C:a:A:S:V:D:dpWFNvzZ:")) != -1) 
    { 
      switch (c) 
        {
	case 't':
	  /* -t <type> type of transform */
	  if (sscanf(OptArg,"%d",&c ) != 1) 
	    {
	      fprintf(OUTMAN, "bad type of multiresolution transform: %s\n", OptArg);
	      exit(-1);
                    
	    }
	  if ((c > 0) && (c <= NBR_TOT_TRANSFORM+1))
	    {
	      transform = (type_transform) (c-1);
	      if ((transform==TO_PYR_LINEAR)||(transform==TO_PYR_BSPLINE)||(transform==TO_PYR_FFT_DIFF_RESOL)||(transform==TO_PYR_MEYER)||(transform==TM_PYR_MEDIAN)||(transform==TM_PYR_LAPLACIAN)||(transform==TM_PYR_MINMAX)||(transform==TM_PYR_SCALING_FUNCTION)||(transform==TO_MALLAT)||(transform==TO_FEAUVEAU)||(transform==TO_HAAR)||(transform==TO_SEMI_PYR)||(transform==TM_TO_SEMI_PYR)||(transform==TM_TO_PYR)||(transform==TO_PYR_MEYER_ISOTROP)||(transform==TO_PYR_FFT_DIFF_SQUARE)||(transform==TC_FCT)||(transform==TO_LIFTING)||(transform==TO_LIFTING))
		cerr << "Please choose an undecimated transform for the sparsity constraint. Use -t 1, 2, 3, 4, 5, 16, 17, 21, 23, 24, 25, 31 or 32." << endl;
	      if((transform==TO_PAVE_FFT))
		cout << "Warning: for wavelet transform in Fourier space, the super-resolved image sizes have to be powers of two."<<endl;
	    }
	  else  
	    {
	      fprintf(OUTMAN, "bad type of transform: %s\n", OptArg);
	      exit(-1);
	    }                
	  break;
	case 'T':
	  /* -T <type> type of transform */
	  if (sscanf(OptArg,"%d",&c ) != 1) 
	    {
	      fprintf(OUTMAN, "bad type of multiresolution transform for model denoising: %s\n", OptArg);
	      exit(-1);
                    
	    }
	  if ((c > 0) && (c <= NBR_TOT_TRANSFORM+1)) 
	    {
	      transform_mod = (type_transform) (c-1);
	      if ((transform_mod==TO_PYR_LINEAR)||(transform_mod==TO_PYR_BSPLINE)||(transform_mod==TO_PYR_FFT_DIFF_RESOL)||(transform_mod==TO_PYR_MEYER)||(transform_mod==TM_PYR_MEDIAN)||(transform_mod==TM_PYR_LAPLACIAN)||(transform_mod==TM_PYR_MINMAX)||(transform_mod==TM_PYR_SCALING_FUNCTION)||(transform_mod==TO_MALLAT)||(transform_mod==TO_FEAUVEAU)||(transform_mod==TO_HAAR)||(transform_mod==TO_SEMI_PYR)||(transform_mod==TM_TO_SEMI_PYR)||(transform_mod==TM_TO_PYR)||(transform_mod==TO_PYR_MEYER_ISOTROP)||(transform_mod==TO_PYR_FFT_DIFF_SQUARE)||(transform_mod==TC_FCT)||(transform_mod==TO_LIFTING)||(transform_mod==TO_LIFTING))
		cerr << "Please choose an undecimated transform for the first guess denoising. Use -T 1, 2, 3, 4, 5, 16, 17, 21, 23, 24, 25, 31 or 32." << endl;
	      if((transform_mod==TO_PAVE_FFT))
		cout << "Warning: for wavelet transform in Fourier space, the input images and super-resolved image sizes have to be powers of two."<<endl;
	    }
	  else  
	    {
	      fprintf(OUTMAN, "bad type of transform: %s\n", OptArg);
	      exit(-1);
	    }                
	  break;
	case 'c':
	  /* -c <type> type of thresholding */
	  if (sscanf(OptArg,"%d",&c ) != 1) 
	    {
	      fprintf(OUTMAN, "bad type of thresholding: %s\n", OptArg);
	      exit(-1);
                    
	    }
	  if ((c >= 0) && (c <2)) 
	    Thresh_type = (Bool)c;
	  else  
	    {
	      fprintf(OUTMAN, "bad type of transform: %s\n", OptArg);
	      exit(-1);
	    }                
	  break;
	case 'n':
	  /* -n <Nbr_Plan> */
	  if (sscanf(OptArg,"%d",&Nbr_Plan) != 1) 
	    {
	      fprintf(OUTMAN, "Error: bad number of scales: %s\n", OptArg);
	      exit(-1);
	    }
	  if ((Nbr_Plan <= 1) || (Nbr_Plan > MAX_SCALE)) 
	    {
	      fprintf(OUTMAN, "Error: bad number of scales: %s\n", OptArg);
	      fprintf(OUTMAN, "       1 < Nbr Scales <= %d\n", MAX_SCALE);
	      exit(-1);
	    }
	  break;
	case 's':
	  if (sscanf(OptArg,"%f",&N_Sigma) != 1) 
	    {
	      fprintf(OUTMAN, "Error: bad N_Sigma: %s\n", OptArg);
	      exit(-1);
	    }
	  if (N_Sigma < 0.)  N_Sigma = DEFAULT_N_SIGMA;
	  break;
	case 'i':
	  /* -i < Number of iterations> */
	  if (sscanf(OptArg,"%d",&Max_Iter) != 1) 
	    {
	      fprintf(OUTMAN, "Error: bad Max_Iter: %s\n", OptArg);
	      exit(-1);
	    }
	  if (Max_Iter <= 0)   Max_Iter = DEFAULT_SPRITE_FILTER;
	  break;
	case 'r':
	  if (sscanf(OptArg,"%f",&ResolUp) != 1) 
	    {
	      fprintf(OUTMAN, "Error: bad ResolUp: %s\n", OptArg);
	      exit(-1);
	    }
	  if (ResolUp <= 0.)  ResolUp = 2;
	  break;    
	case 'R':
	  if (sscanf(OptArg,"%d",&nb_rw) != 1) 
	    {
	      fprintf(OUTMAN, "Error: nb_rw: %s\n", OptArg);
	      exit(-1);
	    }
	  break;
	case 'A':
	  /* -A < Minimisation algorithm> */
	  if (sscanf(OptArg,"%d",&min_id) != 1) 
	    {
	      fprintf(OUTMAN, "Error: min_id: %s\n", OptArg);
	      exit(-1);
	    }
	  break;
	case 'C':
	  if (sscanf(OptArg,"%d",&cv_win) != 1) 
	    {
	      fprintf(OUTMAN, "Error: cv_win: %s\n", OptArg);
	      exit(-1);
	    }
	  break;
	case 'a':
	  
	  if (sscanf(OptArg,"%f",&cv_tol) != 1) 
	    {
	      fprintf(OUTMAN, "Error: cv_tol: %s\n", OptArg);
	      exit(-1);
	    }
	  break;
	     
	  
	case 'w':
	  /* -w < residual file name> */
	  if (sscanf(OptArg,"%s", Name_Resi_Out) != 1) 
	    {
	      fprintf(OUTMAN, "Error: bad file name: %s\n", OptArg);
	      exit(-1);
	    }
	  WriteResi = True;
	  break;
	case 'S':
	  /* -S < shifts file name> */
	  shift_filename = new char[1024];
	  if (sscanf(OptArg,"%s", shift_filename) != 1) 
	    {
	      fprintf(OUTMAN, "Error: bad file name: %s\n", OptArg);
	      exit(-1);
	    }
	  WriteResi = True;
	  break;
	case 'V':
	  /* -V < weights file name> */
	  dist_weights_filename = new char[1024];
	  if (sscanf(OptArg,"%s", dist_weights_filename) != 1) 
	    {
	      fprintf(OUTMAN, "Error: bad file name: %s\n", OptArg);
	      exit(-1);
	    }
	  WriteResi = True;
	  break;
	case 'e':
	    
	  if (sscanf(OptArg,"%d",&Noise_est_meth) != 1) 
	    {
	      fprintf(OUTMAN, "Error: bad Noise_est_meth: %s\n", OptArg);
	      exit(-1);
	      
	    }
	  break;
	case 'I':
	  /* -I < Number of iterations in noise simulation> */
	  if (sscanf(OptArg,"%d",&Max_Iter_Noise_Sim) != 1) 
	    {
	      fprintf(OUTMAN, "Error: bad Max_Iter_Noise_Sim: %s\n", OptArg);
	      exit(-1);
	    }
	  break;
	case 'm':
	  /* -m < Model denoising method> */
	  if (sscanf(OptArg,"%d",&Mod_denoise_meth) != 1) 
	    {
	      fprintf(OUTMAN, "Error: bad Mod_denoise_meth: %s\n", OptArg);
	      exit(-1);
	    }
	  break;
	case 'M':
	  /* -M < Model computing method> */
	  if (sscanf(OptArg,"%d",&model_type) != 1) 
	    {
	      fprintf(OUTMAN, "Error: bad model_type: %s\n", OptArg);
	      exit(-1);
	    }
	  break;
	case 'D':
	  /* -D < Sparsity implementation> */
	  if (sscanf(OptArg,"%d",&sparse_cons_type) != 1) 
	    {
	      fprintf(OUTMAN, "Error: bad sparse_cons_type: %s\n", OptArg);
	      exit(-1);
	    }
	  break;
	case 'd':Sparse_en = False;break;
	case 'p':pos_cons = False;break;
	case 'W':WriteParam = True;break;
	case 'F':eq_flux = False;break;
	case 'N':eq_noise = False;break;
	case 'v': Verbose = True;break;
#ifdef LARGE_BUFF
	case 'z':
	  if (OptZ == True)
	    {
	      fprintf(OUTMAN, "Error: Z option already set...\n");
	      exit(-1);
	    }
	  OptZ = True;
	  break;
	case 'Z':
	  if (sscanf(OptArg,"%d:%s",&VMSSize, VMSName) < 1)
	    {
	      fprintf(OUTMAN, "Error: syntaxe is Size:Directory ... \n");
	      exit(-1);
	    }
	  if (OptZ == True)
	    {
	      fprintf(OUTMAN, "Error: z option already set...\n");
	      exit(-1);
	    }
	  OptZ = True;
	  break;
#endif
	case '?': usage(argv); break;
	default: usage(argv); break;
	}
    }
    
  /* get optional input file names from trailing 
     parameters and open files */
  if (OptInd < argc) strcpy(Name_Cube_In, argv[OptInd++]);
  else usage(argv);
    
  if (OptInd < argc) strcpy(Name_Imag_Out, argv[OptInd++]);
  else usage(argv);

  if (OptInd < argc) strcpy(outputs_Dir, argv[OptInd++]);
  else usage(argv);
    
  	     
       
#ifdef LARGE_BUFF
  if (OptZ == True) vms_init(VMSSize, VMSName, Verbose);
#endif  
}


/****************************************************************************/


int main(int argc, char *argv[]) 
{
  int s,i,j,k;
  Ifloat DataB;
  fitsstruct Header;
  char Cmd[4056];
    
  Cmd[0] = '\0';
  for (k =0; k < argc; k++) sprintf(Cmd, "%s %s", Cmd, argv[k]);
    
  /* Get command line arguments, open input file(s) if necessary */
  filtinit(argc, argv);
  if (Verbose == True)
    {
      cout << endl << endl << "PARAMETERS: " << endl << endl;
      cout << "File Cube in = " << Name_Cube_In << endl;
      cout << "File Ima Out = " << Name_Imag_Out << endl;
      cout << "Outputs directory = "<< outputs_Dir << endl;
      if (Sparse_en==True)
	cout << "Sparsity constraint ON"<<endl;
      else
	cout <<"Sparsity constraint OFF"<<endl;
      cout << "Type of transform for sparse constraint = "<< StringTransform((type_transform)transform)  <<endl;
     
     
    
     if (min_id == GEN_FWBW)
       cout << "Minimizer: Generalized Forward-Backward"<<endl;
     else if (min_id == FISTA)
       cout << "Minimizer: Fista"<<endl;
     else
       cerr << "Unkwown minimizer specified, quitting..."<<endl;
     if(min_id==FISTA)
       {
	 if (sparse_cons_type == ACCURATE_ANALYSIS)
	   cout << "Using subiteration to calculate the prox"<<endl;
	 else if (sparse_cons_type == ONE_STEP_ANALYSIS)
	   cout << "One step approximation used for the prox"<<endl;
	 else 
	   cerr << "Specified implementation unknown, quitting..."<<endl;
       }
     if (model_type == MODEL_SINC_INTERP)
       cout << "Sinc interpolation used to compute the first guess"<<endl;
     else if (model_type == MODEL_NON_LIN_INTERP)
       cout << "Non linear interpolation used to compute the first guess"<<endl;
     else if (model_type == MODEL_GAUSS_FIT)
       cout << "Sinc interpolation + gaussian fitting used to compute the first guess"<<endl;
     else
       cerr << "Unkwown first guess computng method specified, quitting..."<<endl;
     if (pos_cons ==FALSE && min_id != GEN_FWBW)
       cout << "Positivity constraint disable" << endl;
     else
       cout << "Positivity constraint enable"<<endl;
     cout << "Type of transform for first guess denoising = "<< StringTransform((type_transform)transform_mod) <<endl;
     cout << "Thresholding method = "<< Thresh_type <<endl;
     if (Nbr_Plan <=0)
       cout << "Number of scales = floor(log(Nx)/log(2))-1" <<endl;
     else
       cout << "Number of scales = " << Nbr_Plan <<endl;
     cout << "Max_Iter = " << Max_Iter << endl;
     cout << "Number of reweighted passes = " << nb_rw << endl;
     cout << "Zooming factor = " << ResolUp << endl;
     cout << "N_Sigma = "<< N_Sigma << endl; 
     cout << "Noise_est_meth: " << Noise_est_meth << endl;
     cout << "Model denoising method: " << Mod_denoise_meth << endl;
     cout << "Number of iterates used for convergence assessment = " <<cv_win << endl;
     cout << "Associated tolerance parameter: " <<cv_tol << endl;
     if(Noise_est_meth ==1)
       cout << "Max_Iter_Noise_Sim = " << Max_Iter_Noise_Sim << endl;
     if (WriteResi == True)
       cout << "Residual Cube file name: " << Name_Resi_Out << endl;
     if (shift_filename!=NULL)
       cout << "Shift file name: "<< shift_filename << endl;
     if (dist_weights_filename!=NULL)
       cout << "Distance weight file name: " << dist_weights_filename << endl;
     if (eq_flux == False)
       cout << "Photometric flux estimation enabled." <<endl;
     if (eq_noise == False)
       cout << "The noise level is not assumed to be the same in the low resolution images." <<endl;
     if(WriteParam==True)
       cout << "Diagnostic files will be saved in the outputs directory"<< endl;
    }
  
  string output_file = Name_Imag_Out;
  string rep_path = outputs_Dir;
  string resi_file = Name_Resi_Out;
  fltarray Dat;
  io_3d_read_data(Name_Cube_In, Dat, &Header);
  
  int Nz = Dat.nz(),Nx = Dat.nx(),Ny=Dat.ny();
  int siz = MIN(Nx,Ny);
  mr_opt sr_opt = mr_opt_init(siz*ResolUp,transform,Nbr_Plan,Nbr_Plan,NORM_L1,DEF_UNDER_FILTER,F_MALLAT_7_9,I_CONT,False);
  siz = siz*ResolUp;
  if (Mod_denoise_meth==LR_DENOISING)
    siz=MIN(Nx,Ny);
  mr_opt mod_opt = mr_opt_init(siz,transform_mod,Nbr_Plan_Mod,Nbr_Plan_Mod,NORM_L1,DEF_UNDER_FILTER,F_MALLAT_7_9,I_CONT,False);
  Sprite sprite_test(ResolUp,&Dat,mod_opt,sr_opt,Max_Iter,Mod_denoise_meth,N_Sigma,rep_path,output_file,resi_file,Noise_est_meth,sparse_cons_type,min_id,eq_flux,eq_noise,cv_win,cv_tol,Verbose,shift_filename,Sparse_en,dist_weights_filename,0,model_type,True,0,pos_cons);
  Bool Wr_en=True;
  sprite_test.do_it(Wr_en,WriteResi,WriteParam,Max_Iter_Noise_Sim,Thresh_type,nb_rw);
  if (shift_filename!=NULL)
    delete [] shift_filename;
  free(sr_opt.FAS);
  free(mod_opt.FAS);
  Dat.free();
  return 0;
}


